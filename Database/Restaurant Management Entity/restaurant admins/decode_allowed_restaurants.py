#!/usr/bin/env python3
# ============================================================================
# Decode V1 allowed_restaurants BLOB Data
# ============================================================================
# Purpose: Decode PHP serialized arrays and populate restaurant_admin_access
# Prerequisites:
#   1. Data loaded in staging.v1_restaurant_admin_users
#   2. Data migrated to menuca_v3.restaurant_admin_users (Step 2 complete)
#   3. Junction table menuca_v3.restaurant_admin_access created
# ============================================================================

import psycopg2
from phpserialize import loads
import os
import sys

# Database connection
DB_URL = os.getenv('SUPABASE_DB_URL')

if not DB_URL:
    print("‚ùå Error: SUPABASE_DB_URL environment variable not set")
    print("\nUsage:")
    print("  export SUPABASE_DB_URL='postgresql://postgres:[password]@db.nthpbtdjhhnwfxqsxbvy.supabase.co:5432/postgres'")
    print("  python decode_allowed_restaurants.py")
    sys.exit(1)

def decode_php_array(blob_data):
    """Decode PHP serialized array from BLOB"""
    try:
        if not blob_data:
            return []
        
        # Convert bytes to PHP serialized string
        php_str = blob_data.tobytes().decode('latin-1')
        
        # Deserialize PHP array
        data = loads(php_str.encode('latin-1'))
        
        # Extract restaurant IDs
        if isinstance(data, dict):
            return [int(v.decode()) if isinstance(v, bytes) else int(v) 
                    for v in data.values()]
        return []
    except Exception as e:
        print(f"  ‚ö†Ô∏è  Decode error: {e}")
        return []

def create_junction_table_if_not_exists(cursor):
    """Create restaurant_admin_access junction table if it doesn't exist"""
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS menuca_v3.restaurant_admin_access (
            id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            admin_user_id bigint NOT NULL REFERENCES menuca_v3.restaurant_admin_users(id) ON DELETE CASCADE,
            restaurant_id bigint NOT NULL REFERENCES menuca_v3.restaurants(id) ON DELETE CASCADE,
            granted_at timestamptz DEFAULT now() NOT NULL,
            granted_by integer,
            UNIQUE(admin_user_id, restaurant_id)
        );
        
        CREATE INDEX IF NOT EXISTS idx_admin_access_user 
            ON menuca_v3.restaurant_admin_access(admin_user_id);
        
        CREATE INDEX IF NOT EXISTS idx_admin_access_restaurant 
            ON menuca_v3.restaurant_admin_access(restaurant_id);
        
        COMMENT ON TABLE menuca_v3.restaurant_admin_access IS 
            'Multi-restaurant access junction table for restaurant admin users';
    """)
    print("‚úÖ Junction table verified/created")

def verify_prerequisites(cursor):
    """Verify that prerequisites are met before decoding"""
    print("üîç Checking prerequisites...\n")
    
    # Check staging table has data
    cursor.execute("SELECT COUNT(*) FROM staging.v1_restaurant_admin_users")
    staging_count = cursor.fetchone()[0]
    print(f"  Staging records: {staging_count}")
    if staging_count == 0:
        print("  ‚ùå Error: No data in staging table. Run Step 1b first.")
        return False
    
    # Check restaurant_admin_users has data
    cursor.execute("SELECT COUNT(*) FROM menuca_v3.restaurant_admin_users")
    admin_count = cursor.fetchone()[0]
    print(f"  Admin users migrated: {admin_count}")
    if admin_count == 0:
        print("  ‚ùå Error: No admin users migrated. Run Step 2 first.")
        return False
    
    # Check restaurants table
    cursor.execute("SELECT COUNT(*) FROM menuca_v3.restaurants WHERE legacy_v1_id IS NOT NULL")
    rest_count = cursor.fetchone()[0]
    print(f"  Restaurants with V1 IDs: {rest_count}")
    if rest_count == 0:
        print("  ‚ùå Error: No restaurants with legacy_v1_id. Migrate restaurants first.")
        return False
    
    print("\n‚úÖ All prerequisites met!\n")
    return True

def main():
    print("=" * 80)
    print("  BLOB Data Decoder: V1 allowed_restaurants -> restaurant_admin_access")
    print("=" * 80)
    print()
    
    try:
        # Connect to database
        print(f"üì° Connecting to database...")
        conn = psycopg2.connect(DB_URL)
        cursor = conn.cursor()
        print("‚úÖ Connected!\n")
        
        # Verify prerequisites
        if not verify_prerequisites(cursor):
            cursor.close()
            conn.close()
            sys.exit(1)
        
        # Create junction table if needed
        create_junction_table_if_not_exists(cursor)
        conn.commit()
        print()
        
        # Get all staging records with BLOB data
        print("üìä Fetching staging records with BLOB data...")
        cursor.execute("""
            SELECT 
                s.legacy_admin_id,
                s.email,
                s.allowed_restaurants
            FROM staging.v1_restaurant_admin_users s
            WHERE s.allowed_restaurants IS NOT NULL
              AND s.legacy_v1_restaurant_id > 0
            ORDER BY s.legacy_admin_id
        """)
        
        records = cursor.fetchall()
        print(f"‚úÖ Found {len(records)} records to process\n")
        
        if len(records) == 0:
            print("‚ö†Ô∏è  No records with BLOB data found. Nothing to do.")
            cursor.close()
            conn.close()
            return
        
        print("üîÑ Processing records...\n")
        print("-" * 80)
        
        processed = 0
        errors = 0
        total_restaurants = 0
        skipped_no_data = 0
        skipped_no_user = 0
        
        for legacy_id, email, blob_data in records:
            try:
                # Decode PHP array
                restaurant_ids = decode_php_array(blob_data)
                
                if not restaurant_ids:
                    print(f"‚äò  {email}: No restaurant IDs in BLOB")
                    skipped_no_data += 1
                    continue
                
                # Get v3 admin_user_id
                cursor.execute("""
                    SELECT id 
                    FROM menuca_v3.restaurant_admin_users
                    WHERE email = %s
                """, (email.lower().strip(),))
                
                result = cursor.fetchone()
                if not result:
                    print(f"‚ö†Ô∏è  {email}: Admin user not found in V3 (not migrated)")
                    skipped_no_user += 1
                    errors += 1
                    continue
                
                admin_user_id = result[0]
                
                # Insert access records
                inserted = 0
                not_found = 0
                for rest_v1_id in restaurant_ids:
                    try:
                        cursor.execute("""
                            INSERT INTO menuca_v3.restaurant_admin_access 
                                (admin_user_id, restaurant_id)
                            SELECT %s, r.id
                            FROM menuca_v3.restaurants r
                            WHERE r.legacy_v1_id = %s
                            ON CONFLICT (admin_user_id, restaurant_id) DO NOTHING
                            RETURNING id
                        """, (admin_user_id, rest_v1_id))
                        
                        if cursor.fetchone():
                            inserted += 1
                        else:
                            not_found += 1
                            
                    except psycopg2.Error as e:
                        print(f"    ‚ö†Ô∏è  Insert error for restaurant V1 ID {rest_v1_id}: {e}")
                
                conn.commit()
                processed += 1
                total_restaurants += inserted
                
                status = "‚úì" if not_found == 0 else "‚ö†"
                print(f"{status}  {email}: {inserted}/{len(restaurant_ids)} restaurants granted")
                if not_found > 0:
                    print(f"    Note: {not_found} restaurant(s) not found in V3")
                
            except Exception as e:
                print(f"‚ùå Error processing {email}: {e}")
                errors += 1
                conn.rollback()
        
        print("-" * 80)
        print()
        print("=" * 80)
        print("  SUMMARY")
        print("=" * 80)
        print(f"  Total records processed:     {len(records)}")
        print(f"  ‚úÖ Successfully processed:   {processed}")
        print(f"  ‚äò  Skipped (no BLOB data):   {skipped_no_data}")
        print(f"  ‚ö†Ô∏è  Skipped (user not found): {skipped_no_user}")
        print(f"  ‚ùå Errors:                   {errors}")
        print(f"  üéØ Total access grants:      {total_restaurants}")
        print("=" * 80)
        print()
        
        # Verification query
        print("üìä Verification: Multi-restaurant access summary")
        cursor.execute("""
            SELECT 
                COUNT(DISTINCT admin_user_id) AS users_with_access,
                COUNT(*) AS total_grants,
                AVG(grant_count) AS avg_restaurants_per_user,
                MAX(grant_count) AS max_restaurants_per_user
            FROM (
                SELECT admin_user_id, COUNT(*) AS grant_count
                FROM menuca_v3.restaurant_admin_access
                GROUP BY admin_user_id
            ) AS counts
        """)
        
        result = cursor.fetchone()
        if result and result[0]:
            users, grants, avg, max_rest = result
            print(f"  Users with multi-access:     {users}")
            print(f"  Total access grants:         {grants}")
            print(f"  Avg restaurants per user:    {avg:.1f}")
            print(f"  Max restaurants per user:    {max_rest}")
        
        print()
        print("‚úÖ BLOB decoding complete!")
        print()
        
        cursor.close()
        conn.close()
        
    except psycopg2.Error as e:
        print(f"\n‚ùå Database error: {e}")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Unexpected error: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()


