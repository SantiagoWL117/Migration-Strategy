#!/usr/bin/env python3
# Decode V1 allowed_restaurants BLOB Data - Windows Compatible Version
# No emojis, plain ASCII output for PowerShell compatibility

import psycopg2
from phpserialize import loads
import os
import sys

DB_URL = os.getenv('SUPABASE_DB_URL')

if not DB_URL:
    print("ERROR: SUPABASE_DB_URL environment variable not set")
    sys.exit(1)

def decode_php_array(blob_data):
    """Decode PHP serialized array from BLOB"""
    try:
        if not blob_data:
            return []
        
        php_str = blob_data.tobytes().decode('latin-1')
        data = loads(php_str.encode('latin-1'))
        
        if isinstance(data, dict):
            return [int(v.decode()) if isinstance(v, bytes) else int(v) 
                    for v in data.values()]
        return []
    except Exception as e:
        print(f"  WARNING: Decode error: {e}")
        return []

def create_junction_table(cursor):
    """Create restaurant_admin_access junction table if it doesn't exist"""
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS menuca_v3.restaurant_admin_access (
            id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            admin_user_id bigint NOT NULL REFERENCES menuca_v3.restaurant_admin_users(id) ON DELETE CASCADE,
            restaurant_id bigint NOT NULL REFERENCES menuca_v3.restaurants(id) ON DELETE CASCADE,
            granted_at timestamptz DEFAULT now() NOT NULL,
            granted_by integer,
            UNIQUE(admin_user_id, restaurant_id)
        );
        
        CREATE INDEX IF NOT EXISTS idx_admin_access_user 
            ON menuca_v3.restaurant_admin_access(admin_user_id);
        
        CREATE INDEX IF NOT EXISTS idx_admin_access_restaurant 
            ON menuca_v3.restaurant_admin_access(restaurant_id);
    """)
    print("[OK] Junction table verified/created")

def main():
    print("=" * 80)
    print("  BLOB Data Decoder: Step 5 Multi-Restaurant Access Migration")
    print("=" * 80)
    print()
    
    try:
        print("[1/6] Connecting to database...")
        conn = psycopg2.connect(DB_URL)
        cursor = conn.cursor()
        print("[OK] Connected successfully")
        print()
        
        print("[2/6] Verifying prerequisites...")
        cursor.execute("SELECT COUNT(*) FROM staging.v1_restaurant_admin_users")
        staging_count = cursor.fetchone()[0]
        print(f"      Staging records: {staging_count}")
        
        cursor.execute("SELECT COUNT(*) FROM menuca_v3.restaurant_admin_users")
        admin_count = cursor.fetchone()[0]
        print(f"      Admin users migrated: {admin_count}")
        
        cursor.execute("SELECT COUNT(*) FROM menuca_v3.restaurants WHERE legacy_v1_id IS NOT NULL")
        rest_count = cursor.fetchone()[0]
        print(f"      Restaurants with V1 IDs: {rest_count}")
        print("[OK] Prerequisites met")
        print()
        
        print("[3/6] Creating junction table...")
        create_junction_table(cursor)
        conn.commit()
        print()
        
        print("[4/6] Fetching BLOB records...")
        cursor.execute("""
            SELECT 
                s.legacy_admin_id,
                s.email,
                s.allowed_restaurants
            FROM staging.v1_restaurant_admin_users s
            WHERE s.allowed_restaurants IS NOT NULL
              AND s.legacy_v1_restaurant_id > 0
            ORDER BY s.legacy_admin_id
        """)
        
        records = cursor.fetchall()
        print(f"[OK] Found {len(records)} records with BLOB data")
        print()
        
        if len(records) == 0:
            print("      No BLOB data to process. Migration complete.")
            cursor.close()
            conn.close()
            return
        
        print("[5/6] Processing BLOB records...")
        print("-" * 80)
        
        processed = 0
        errors = 0
        total_grants = 0
        skipped_no_data = 0
        skipped_no_user = 0
        
        for legacy_id, email, blob_data in records:
            try:
                restaurant_ids = decode_php_array(blob_data)
                
                if not restaurant_ids:
                    print(f"  SKIP: {email} (no restaurant IDs in BLOB)")
                    skipped_no_data += 1
                    continue
                
                cursor.execute("""
                    SELECT id 
                    FROM menuca_v3.restaurant_admin_users
                    WHERE email = %s
                """, (email.lower().strip(),))
                
                result = cursor.fetchone()
                if not result:
                    print(f"  SKIP: {email} (user not found in V3)")
                    skipped_no_user += 1
                    errors += 1
                    continue
                
                admin_user_id = result[0]
                
                inserted = 0
                not_found = 0
                for rest_v1_id in restaurant_ids:
                    try:
                        cursor.execute("""
                            INSERT INTO menuca_v3.restaurant_admin_access 
                                (admin_user_id, restaurant_id)
                            SELECT %s, r.id
                            FROM menuca_v3.restaurants r
                            WHERE r.legacy_v1_id = %s
                            ON CONFLICT (admin_user_id, restaurant_id) DO NOTHING
                            RETURNING id
                        """, (admin_user_id, rest_v1_id))
                        
                        if cursor.fetchone():
                            inserted += 1
                        else:
                            not_found += 1
                            
                    except psycopg2.Error as e:
                        print(f"       ERROR inserting restaurant V1 ID {rest_v1_id}: {e}")
                
                conn.commit()
                processed += 1
                total_grants += inserted
                
                status = "[OK] " if not_found == 0 else "[WARN]"
                print(f"{status} {email}: {inserted}/{len(restaurant_ids)} restaurants granted")
                if not_found > 0:
                    print(f"       Note: {not_found} restaurant(s) not found in V3")
                
            except Exception as e:
                print(f"  ERROR processing {email}: {e}")
                errors += 1
                conn.rollback()
        
        print("-" * 80)
        print()
        
        print("[6/6] Generating summary...")
        print("=" * 80)
        print("  MIGRATION SUMMARY")
        print("=" * 80)
        print(f"  Total records with BLOB:     {len(records)}")
        print(f"  Successfully processed:      {processed}")
        print(f"  Skipped (no BLOB data):      {skipped_no_data}")
        print(f"  Skipped (user not found):    {skipped_no_user}")
        print(f"  Errors:                      {errors}")
        print(f"  Total access grants created: {total_grants}")
        print("=" * 80)
        print()
        
        print("Verification Query Results:")
        cursor.execute("""
            SELECT 
                COUNT(DISTINCT admin_user_id) AS users_with_access,
                COUNT(*) AS total_grants,
                ROUND(AVG(grant_count)::numeric, 1) AS avg_per_user,
                MAX(grant_count) AS max_per_user
            FROM (
                SELECT admin_user_id, COUNT(*) AS grant_count
                FROM menuca_v3.restaurant_admin_access
                GROUP BY admin_user_id
            ) AS counts
        """)
        
        result = cursor.fetchone()
        if result and result[0]:
            users, grants, avg, max_rest = result
            print(f"  Users with multi-access:     {users}")
            print(f"  Total access grants in DB:   {grants}")
            print(f"  Avg restaurants per user:    {avg}")
            print(f"  Max restaurants per user:    {max_rest}")
        
        print()
        print("[SUCCESS] Step 5 complete! Multi-restaurant access migrated.")
        print()
        
        cursor.close()
        conn.close()
        
    except psycopg2.Error as e:
        print(f"\nDATABASE ERROR: {e}")
        sys.exit(1)
    except Exception as e:
        print(f"\nUNEXPECTED ERROR: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()

