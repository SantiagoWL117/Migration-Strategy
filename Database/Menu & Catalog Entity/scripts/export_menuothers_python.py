#!/usr/bin/env python3
"""
Export menuothers table with hex-encoded BLOBs using Python
Phase 4.2 - Step 1: MySQL Export
"""
import pymysql
import binascii
import os

OUTPUT_FILE = r"Database\Menu & Catalog Entity\dumps\menuca_v1_menuothers_BLOB.sql"

def main():
    print("=" * 70)
    print("Phase 4.2: Export menuothers with hex-encoded BLOBs")
    print("=" * 70)
    print()

    # Connect to MySQL
    print("Connecting to MySQL...")
    try:
        conn = pymysql.connect(
            host='localhost',
            user='root',
            password='root',
            database='menuca_v1',
            charset='utf8mb4'
        )
        print("  Connected successfully!")
    except Exception as e:
        print(f"  Error connecting to MySQL: {e}")
        print()
        print("Please verify:")
        print("  1. MySQL is running")
        print("  2. Credentials are correct (root/root)")
        print("  3. Database 'menuca_v1' exists")
        return

    cursor = conn.cursor()

    # Fetch all menuothers data
    print()
    print("Fetching menuothers data...")
    cursor.execute("""
        SELECT id, restaurant, dishId, content, type, groupId 
        FROM menuothers
        ORDER BY id
    """)

    rows = cursor.fetchall()
    print(f"  Fetched {len(rows):,} rows")

    # Get table structure
    print("Fetching table structure...")
    cursor.execute("SHOW CREATE TABLE menuothers")
    create_table = cursor.fetchone()[1]

    # Create output directory if needed
    os.makedirs(os.path.dirname(OUTPUT_FILE), exist_ok=True)

    # Write SQL dump
    print()
    print(f"Writing to: {OUTPUT_FILE}")
    with open(OUTPUT_FILE, 'w', encoding='utf-8') as f:
        # Write header
        f.write("-- Menu.ca V1 Database Dump\n")
        f.write("-- Table: menuothers\n")
        f.write("-- Exported with hex-encoded BLOBs\n")
        f.write(f"-- Rows: {len(rows):,}\n")
        f.write("-- Generated by: export_menuothers_python.py\n\n")
        
        # Write table structure
        f.write("DROP TABLE IF EXISTS `menuothers`;\n\n")
        f.write(create_table + ";\n\n")
        
        # Write data
        f.write("--\n")
        f.write("-- Dumping data for table `menuothers`\n")
        f.write("--\n\n")
        f.write("INSERT INTO `menuothers` VALUES\n")
        
        for i, row in enumerate(rows):
            id_val, restaurant, dishId, content, type_val, groupId = row
            
            # Convert BLOB to hex
            if content:
                # Handle both bytes and string types
                if isinstance(content, bytes):
                    content_hex = "0x" + binascii.hexlify(content).decode('utf-8')
                elif isinstance(content, str):
                    # Already a string, convert to bytes first
                    content_hex = "0x" + binascii.hexlify(content.encode('latin-1')).decode('utf-8')
                else:
                    content_hex = "NULL"
            else:
                content_hex = "NULL"
            
            # Escape strings
            if type_val:
                type_escaped = f"'{type_val}'"
            else:
                type_escaped = "NULL"
            
            # Handle NULL groupId
            groupId_str = str(groupId) if groupId is not None else "NULL"
            
            # Build row
            row_sql = f"({id_val},{restaurant},{dishId},{content_hex},{type_escaped},{groupId_str})"
            
            if i < len(rows) - 1:
                f.write(row_sql + ",\n")
            else:
                f.write(row_sql + ";\n")
            
            if (i + 1) % 10000 == 0:
                print(f"  Written {i + 1:,} / {len(rows):,} rows ({(i + 1) * 100 / len(rows):.1f}%)...")

    cursor.close()
    conn.close()

    # Get file size
    file_size = os.path.getsize(OUTPUT_FILE) / (1024 * 1024)

    print()
    print("=" * 70)
    print("Export Complete!")
    print("=" * 70)
    print(f"  Output: {OUTPUT_FILE}")
    print(f"  Rows: {len(rows):,}")
    print(f"  File size: {file_size:.2f} MB")
    print()
    print("Next step: Run phase4_2_extract_menuothers_hex.py")
    print()

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(f"\nError: {e}")
        import traceback
        traceback.print_exc()

